Introduction
============

This kit contains a Vagrant configuration template that can be used to create
new VM's initialized to run BrightLink software.


Vagrant Primer
==============

What is Vagrant?  Think disposable virtual machines managed by a slick 
commandline tool designed to get you up and running more or less instantly.  
The attached Vagrantfile (vagrant configuration file) is slightly customized 
from the version generated by the command::

    % vagrant init precise64 http://files.vagrantup.com/precise64.box

incidentally, this command can be shortened after you've created at least one
vagrant box::

    % vagrant init precise64

Once you've run this command, the directory you are in will have a new 
Vagrantfile; running::

    % vagrant up

from that directory will bring the machine up, creating it first if necessary.  
Once the box is up, you can run::

    % vagrant ssh

to connect with it and::

    % vagrant halt

to shut it down.  the default setup is pretty bare-bones but boots in a 
ridonculous amount of time (it's actually kind of fun to start it from the GUI
once in a while; I have no idea how they get the boot times so fast).  Some 
basic port forwarding and host/guest folder sharing are included in the basic 
setup.

where things get really fun is with the provisioning script, which takes that 
basic machine set up and creates a full, ready to run AMFTRB environment, 
including the virtualenv, all the required system and Python packages, our 
modules, core, AMFTRB cusom, and the database.  When you connect to the box, 
you're already in the virtual environment and ready to roll.  All the source is 
shared from your host machine to the vagrant guest, so you work with it just as 
you always have.


Prerequisites
=============

1. Assumed dir structure; ``./`` will be mounted as ``/brightlink_dev``
inside the VM::

    ./
        packages/
            forks/
                django/
                elixir/
                PIL/
                pisa/
                satchmo/
                suds/
            trml2pdf/
        modules-git/
            blcore/
                blcore/
                setup.py
                ...
            blconfig/
            ...
        brighttrac/
            brighttrac2/
            setup.py
            ...
        nasm/
            brighttrac_NASM/
            setup.py
            ...

#. Make sure core, modules, and packages/forks are all up to date


Engage!
=======

1. For a new client, pull down the client custom code::

    % mkdir nasm
    % cd nasm
    % git svn clone svn+ssh://svn.thebrightlink.com/var/svn/brighttrac/clients/NASM/trunk .


#. Get the kit::

    % wget --no-check-certificate https://github.com/drocco-007/vagrant_templates/tarball/master -O - | tar xz --strip-components=1

#. Tweak to your environment and settings

    At a minimum, you will need to update ``vagrant_provision.sh`` and 
    ``update_schemas.sh`` to reference the correct client and paths. The
    responsibilities of each of these files are:

        * ``vagrant_provision.sh`` defines how the machine will be set up, 
          including the installed system packages, virtual environment set up, 
          Python packages, and initial database.

        * ``update_schemas.sh`` provides a no-frills schema updater for the
          client.

        * ``Vagrantfile`` contains the settings for forwarded ports and shared 
          folders.

#. Start and provision a new machine::

    % vagrant up

#. Watch the bits go by. When it's finished, you can login with::

    % vagrant ssh
